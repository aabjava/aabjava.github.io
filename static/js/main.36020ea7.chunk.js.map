{"version":3,"sources":["serviceWorker.js","js/webapps/virusapp/svgs/svgs.js","js/webapps/virusapp/actions/virusActions.js","js/common/components/buttons/ToogleSwitch.js","js/webapps/virusapp/components/ChartComponent.js","js/webapps/virusapp/components/VirusAppComponent.js","js/webapps/virusapp/reducers/simulationReducer.js","js/webapps/virusapp/reducers/recordsReducer.js","js/webapps/virusapp/reducers/reducer.js","js/webapps/virusapp/sagas/virusSagas.js","js/webapps/virusapp/stores/virusStore.js","index.js"],"names":["Boolean","window","location","hostname","match","virusLogo","id","version","viewBox","xmlns","transform","cx","cy","r","fill","style","paintOrder","d","stroke","strokeWidth","changeSimulation","createAction","removeCountrySelected","addCountrySelected","changeCountrySelected","processRawData","createRoutine","confirmedRawData","deathsRawData","ToogleSwitch","this","props","checked","onChangeToggle","disabled","label","restProps","wrapperClassName","className","onClick","name","React","PureComponent","regressionTypes","value","plotYTypes","dataTypes","graphTypes","colors","ChartComponent","chartRef","createRef","chartObject","state","plotYType","growthFactorGraph","currentRegressionFormula","formulaRef","oldProps","oldState","renderChart","type","index","dispatch","Actions","current","console","debug","innerHTML","formulaString","r2","countrySelectedList","rawConfirmedData","rawDeathData","availableConfirmedDates","availableDeathDates","simulateSIR","dataType","useRegressionTypeIndex","simulationAddDays","useModelFromOtherCountry","fromDayWithGreaterThan","onlyLastXDays","lastXDays","onlyFirstXDays","firstXDays","graphType","availableConfirmedCountries","availableDeathCountries","regression","population","transmitionRate","recoverTime","maxTimeSimulate","initDeathRecords","initConfirmedRecords","validCountriesIndex","s","length","selected","push","useSeveralCountries","availableDates","availableCountries","rawData","allCountriesData","allCountriesDays","text","graphInfo","finalLabelArray","logX","country","result","generateDataSetXY","countryDataSet","datasets","labels","destroy","ChartJs","getContext","data","options","responsive","scales","yAxes","ticks","beginAtZero","max","undefined","min","plugins","zoom","pan","enabled","mode","sensitivity","generateDataSet","countryDays","slice","Math","maxDays","restrictDays","countryData","regressionTrainingDataSet","map","regressionType","config","order","simulatedData","regressionFunction","string","equation","renderFormulaInject","addDays","initial","lastDay","Date","newDate","setDate","getDate","getUTCFullYear","getUTCMonth","getUTCDate","newDataSet","forEach","predict","borderColor","totalInfected","i0","sir_sol","t0","y0","step","tmax","b","g","integrator","rk4","dydt","y","t","ta","ya","simulate","x","I","fillArray","Array","shift","concat","allowMoreCountries","countrySelect","key","isClearable","classNamePrefix","onChange","newValue","handleChangeCountry","Object","values","evt","currentTarget","renderCountries","Number","parseInt","setState","target","ref","parseFloat","height","href","Chart","connect","records","simulation","color","countDateFrom","backgroundColor","date","infected","isNaN","grothFactor","newInfected","VirusAppComponent","Papa","parse","download","dynamicTyping","complete","results","log","trigger","confirmed","deaths","Svg","VirusApp","simulationReducer","handleActions","action","payload","obj","newCountrySelected","splice","primaryCountry","secondaryCountry","usePredictionFromDates","predictionFromDates","recordsStateReducer","header","availableCountriesForCompareRegretion","col","row","countryName","numberNotZeros","initDeathsRecords","persistSimulationConfig","storage","rootReducer","combineReducers","persistReducer","watchProcessRawData","poorDate","realDate","moment","parseDate","format","error","ex","newRawData","indexByCountryName","compileCountryRow","currentIndex","put","success","failure","message","fulfill","takeEvery","TRIGGER","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","persistor","persistStore","VirusSagas","routinePromiseWatcherSaga","run","ReactDom","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.36020ea7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\r\n * Created by Monster on 2020-03-18.\r\n */\r\nimport React from \"react\";\r\n\r\nexport const virusLogo = <svg id=\"virusLogo\" version=\"1.1\" viewBox=\"0 0 148.47 154.43\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g id=\"layer1\" transform=\"translate(-36.219 -57.034)\">\r\n        <circle id=\"circle\" cx=\"108.92\" cy=\"135.03\" r=\"49.409\" fill=\"#a00\" style={{paintOrder:\"stroke fill markers\"}}/>\r\n        <g id=\"spikes\" fill=\"#a00\">\r\n            <path id=\"path819\" d=\"m74.391 101.27c-0.34416 0.44864-6.7371-4.0662-15.301-10.747-0.98294 0.50421-1.9933 1.014-3.0353 1.5333-0.98444-3.1514-2.0085-6.4697-3.0892-9.9899-0.01037-0.0027 1.2224 0.32272 1.212 0.31999 3.5308 0.93269 6.9025 1.8279 10.091 2.6817-0.85479 1.1303-1.6854 2.2215-2.4988 3.2803 9.0254 6.1783 15.307 10.983 14.956 11.47-0.34943 0.48396-6.9994-4.0394-16.541-11.271 0.90382-0.99653 1.8404-2.0205 2.8151-3.0801-2.6255-0.72738-5.3302-1.4845-8.1737-2.2852-0.0099-0.0028-0.96629-0.27227-0.97617-0.27506 0.95598 2.7031 1.8489 5.2425 2.7127 7.7385 0.89309-0.70373 1.7626-1.382 2.6145-2.0374 9.4436 7.132 15.558 12.214 15.214 12.662z\"/>\r\n            <path id=\"path819-6\" d=\"m65.326 115.36c-0.20924 0.55264-7.733-1.9892-17.974-6.0309-0.6693 0.86478-1.3599 1.7454-2.0742 2.6472-2.1174-2.8799-4.3535-5.9394-6.7146-9.1797-0.0045 3.3e-4 0.62936-0.0468 0.62489-0.0464 3.7667-0.27963 7.342-0.54033 10.745-0.77884-0.30315 1.469-0.60121 2.8874-0.89798 4.265 10.524 3.4016 17.99 6.2481 17.794 6.8183-0.19566 0.56759-7.9603-1.8304-19.349-5.9855 0.41396-1.3396 0.84811-2.7206 1.304-4.1534-2.7636 0.13403-5.5882 0.26007-8.5836 0.38896-0.0045 1.9e-4 -0.49224 0.0211-0.4967 0.0213 1.941 2.5262 3.7611 4.9036 5.5239 7.2246 0.52295-1.0293 1.0346-2.0251 1.5391-2.9923 11.325 4.1218 18.769 7.2508 18.56 7.8017z\"/>\r\n            <path id=\"path819-6-9\" d=\"m62.115 127.4c0.13115 0.47581-5.5483 2.3127-13.606 4.4286-0.1093 1.0783-0.23271 2.1878-0.36865 3.3377-2.5058-1.2494-5.2687-2.6305-8.0837-4.0442 0.0033-3e-3 0.68003-0.64376 0.6833-0.64686 2.1833-2.0661 4.3532-4.1119 6.3259-5.9695 0.41549 1.4058 0.80743 2.7532 1.1778 4.0584h2e-6c7.9317-2.7724 13.741-4.4098 13.898-3.9156 0.15608 0.49105-5.6364 2.5482-14.591 5.1393h-2e-6c-0.26014-1.3483-0.52244-2.7539-0.79226-4.232-1.5279 1.5305-3.1873 3.1916-4.85 4.8479 0.0033-3e-3 -0.52647 0.5242-0.52314 0.52088 2.1236 1.1208 4.22 2.2339 6.1616 3.2669-0.12681-1.1627-0.24141-2.2796-0.34219-3.3599 8.8579-2.5482 14.779-3.9061 14.91-3.4316z\"/>\r\n            <path id=\"path819-6-9-2\" d=\"m64.096 147.05c0.23908 0.5404-6.9026 4.0137-17.032 8.3273 0.13071 1.0857 0.25731 2.1976 0.38196 3.3413-3.5298-0.56367-7.2702-1.1718-11.227-1.8209-0.0029 3e-3 0.41527-0.47523 0.41232-0.47185 2.4855-2.844 4.848-5.5402 7.1035-8.0996 0.81564 1.2588 1.5995 2.478 2.3555 3.6672 9.8816-4.968 17.196-8.1838 17.457-7.6398 0.25925 0.54151-6.953 4.2864-17.979 9.3251-0.64595-1.2445-1.3065-2.5326-1.9881-3.8728-1.8736 2.036-3.7962 4.1092-5.8383 6.3042-3e-3 3e-3 -0.33563 0.3607-0.33867 0.36397 3.1559 0.43569 6.1212 0.85034 9.006 1.265-0.35039-1.1-0.68536-2.1684-1.0053-3.2112 10.958-5.0179 18.455-8.0166 18.693-7.4779z\"/>\r\n            <path id=\"path819-8\" d=\"m86.746 91.697c-0.34884 0.21552-3.2496-4.0597-6.9573-10.198-0.79657 0.10959-1.6151 0.21548-2.4603 0.31975 0.23995-2.2656 0.50178-4.677 0.78118-7.211-0.0013-8.92e-4 0.69402 0.46119 0.69268 0.4603 2.0723 1.3776 4.0711 2.7108 5.9384 3.9606-0.88815 0.56556-1.7463 1.1076-2.5827 1.6295 4.1595 5.9083 6.9115 10.346 6.5503 10.586-0.35894 0.23821-3.4361-4.0979-7.6798-10.856 0.88703-0.45154 1.8075-0.91428 2.7686-1.3933-1.5135-1.0021-3.0902-2.0505-4.726-3.1428-0.0012-7.84e-4 -0.546-0.36475-0.54717-0.36553-0.17458 1.9374-0.34398 3.7731-0.51504 5.5557 0.79194-0.28577 1.5587-0.55755 2.3058-0.81573 4.2086 6.6726 6.7794 11.257 6.4313 11.472z\"/>\r\n            <path id=\"path819-8-0\" d=\"m102.86 86.595c-0.5899 0.03477-1.3433-7.871-1.8377-18.87-1.0627-0.25764-2.1486-0.5283-3.2636-0.81192 1.7637-3.1091 3.6429-6.3999 5.6359-9.8787-2e-3 -0.0039 0.29979 0.55537 0.29766 0.55142 1.7939 3.3239 3.4924 6.4807 5.1002 9.4895-1.4646 0.32336-2.8811 0.63075-4.2598 0.9226 1.1942 10.996 1.6459 18.973 1.0452 19.027-0.598 0.05327-1.581-8.0136-2.4408-20.106 1.3919-0.1694 2.8297-0.33724 4.3238-0.50646-1.2513-2.4678-2.5202-4.9945-3.8614-7.6759-2e-3 -4e-3 -0.22039-0.44067-0.22238-0.44466-1.5129 2.8037-2.9394 5.4361-4.3378 7.9933 1.1531 0.05688 2.2711 0.11711 3.36 0.1825 0.86422 12.021 1.0487 20.093 0.4607 20.128z\"/>\r\n            <path id=\"path819-6-9-2-4\" d=\"m71.72 163.65c0.32842 0.31211-3.7382 4.9676-9.6963 11.162 0.28559 0.8889 0.57193 1.8031 0.86203 2.7472-2.538 0.38581-5.2131 0.78358-8.0408 1.1996-0.0012 3e-3 0.45459-1.183 0.45338-1.1798 1.0378-2.6992 2.043-5.3032 2.9882-7.7411 0.79002 0.86733 1.5508 1.7077 2.2873 2.5287 5.5916-6.6259 9.8873-11.182 10.252-10.856 0.36264 0.32438-3.7548 5.1832-10.276 12.094-0.67961-0.88875-1.3778-1.8096-2.1008-2.7689-0.77326 2.0189-1.5843 4.1256-2.4304 6.3124-0.0011 3e-3 -0.3693 0.95385-0.37039 0.95669 2.1493-0.40196 4.1767-0.77691 6.1653-1.135-0.46748-0.83535-0.91565-1.6464-1.3459-2.439 6.4134-6.8245 10.924-11.192 11.252-10.881z\"/>\r\n            <path id=\"path819-6-9-2-4-3\" d=\"m88.184 179.23c0.47847 0.3468-3.9468 6.9411-10.532 15.765 0.65909 0.87259 1.3278 1.7699 2.0108 2.6956-3.3342 1.2884-6.8729 2.6442-10.619 4.0734-8.51e-4 4e-3 0.11986-0.61963 0.11901-0.61523 0.71758-3.7083 1.4032-7.2269 2.0652-10.573 1.3381 0.67763 2.6288 1.3371 3.8805 1.9846 6.0415-9.2643 10.746-15.723 11.244-15.384 0.49645 0.33761-3.8532 7.2021-10.849 17.103-1.1843-0.75067-2.4031-1.5317-3.6664-2.3472-0.59513 2.7021-1.2139 5.461-1.8748 8.3854-9.83e-4 4e-3 -0.10864 0.48058-0.10962 0.48494 2.9467-1.2109 5.7181-2.3441 8.42-3.4369-0.85617-0.77448-1.6831-1.5293-2.4842-2.2697 6.9465-9.8489 11.917-16.212 12.394-15.866z\"/>\r\n            <path id=\"path819-8-0-6\" d=\"m118.61 87.595c-0.38371-0.18263 1.8953-5.4564 5.4136-12.601-0.57276-0.53907-1.1553-1.0944-1.7514-1.6681 2.1855-1.3446 4.5029-2.7609 6.9593-4.2574 5e-5 -0.0039-7e-3 0.49714-7e-3 0.49324-0.0385 2.7228-0.0783 5.3066-0.12313 7.7659-1.0246-0.31437-2.014-0.62179-2.9747-0.92554-3.0781 7.3861-5.5742 12.602-5.9726 12.427-0.39651-0.17449 1.7992-5.63 5.4765-13.589 0.92691 0.38447 1.8817 0.78586 2.8715 1.2059 0.0792-1.9982 0.16797-4.0399 0.26548-6.2048 1.8e-4 -0.0039 0.0175-0.38813 0.0177-0.392-1.9157 1.2423-3.7164 2.4055-5.4767 3.5326 0.69849 0.44407 1.3741 0.87792 2.0299 1.3047-3.6468 7.9119-6.346 13.091-6.7285 12.909z\"/>\r\n            <path id=\"path819-68\" d=\"m157.11 125.53c-0.16925-0.56417 7.4759-3.1613 19.063-6.4752 0.43511 1.0003 0.87539 2.0297 1.3246 3.0932 1.9219-2.1911 3.9049-4.4344 6.019-6.8176 5e-3 5.3e-4 -0.49863-0.0568-0.49396-0.0563-2.9789-0.33951-5.7876-0.66416-8.5349-0.99249 0.35381 1.4614 0.68964 2.8695 1.0082 4.235-11.653 3.3427-19.568 5.188-19.723 4.608-0.15591-0.5826 7.492-2.8962 18.23-5.5483-0.19901-1.3951-0.39644-2.831-0.59539-4.3177 3.3778 0.47758 6.9259 0.98942 10.664 1.5336 4e-3 6.2e-4 0.6158 0.0897 0.62008 0.0903-2.5835 3.0659-5.0295 5.9604-7.3445 8.684-0.64905-0.94988-1.2759-1.8769-1.8827-2.7867-10.5 3.3104-18.185 5.3161-18.354 4.7501z\"/>\r\n            <path id=\"path819-6-6\" d=\"m153.8 146.61c0.0845-0.47674 5.8598 0.28886 14.576 1.9511-0.0407 1.0859-0.0936 2.2108-0.15642 3.3846 1.7905-1.2231 3.7921-2.5906 5.7577-3.9258-3e-3 -2e-3 -0.44931-0.39499-0.45203-0.39738-1.7038-1.4985-3.4223-3.0179-4.9882-4.4025-0.17425 1.5071-0.34573 2.9371-0.51927 4.3067-8.7992-1.7007-14.501-3.1669-14.394-3.6577 0.10849-0.49386 5.7936 0.54791 13.611 2.4943 0.29038-1.3347 0.60104-2.7152 0.93301-4.159 2.0435 1.6781 4.3075 3.5392 6.572 5.408-3e-3 -2e-3 0.59968 0.49508 0.59675 0.49266-2.6328 1.6689-5.2662 3.3307-7.6023 4.8033-0.19743-1.1346-0.37972-2.2285-0.54576-3.2914-7.8889-1.2833-13.474-2.5286-13.389-3.0069z\"/>\r\n            <path id=\"path819-6-9-2-0\" d=\"m146.97 162.42c0.36162-0.46493 6.9094 4.2595 16.326 11.781-0.56289 0.93436-1.1465 1.8898-1.7528 2.8723 2.8994 0.29608 5.8769 0.61165 9.0444 0.95294 2e-3 4e-3 -0.24276-0.43925-0.24049-0.43513-1.45-2.6242-2.8135-5.1011-4.1384-7.5301-0.98574 1.1354-1.9385 2.2252-2.8665 3.2763-9.4786-7.5583-15.57-12.938-15.187-13.4 0.38438-0.46475 6.7028 4.4263 15.088 11.639 1.0214-0.97081 2.0771-1.964 3.1732-2.9879 1.5688 3.0293 3.2083 6.2172 4.9313 9.5784 2e-3 4e-3 0.28386 0.5538 0.28582 0.55765-3.9958-0.32808-7.7722-0.64354-11.333-0.95118 0.39781-1.0795 0.78984-2.1277 1.1795-3.1494-8.784-6.6376-14.872-11.737-14.51-12.203z\"/>\r\n            <path id=\"path819-8-9\" d=\"m149.32 109.22c-0.24301-0.37784 4.7741-3.8629 12.518-8.6922 0.51343 0.65582 1.0365 1.3324 1.5728 2.0326 0.95361-2.026 1.9434-4.1098 2.9989-6.3217 2e-3 -3.84e-4 -0.30537 0.04886-0.30297 0.04847-2.2412 0.35842-4.3541 0.69281-6.4246 1.012 0.54792 1.016 1.0717 1.9955 1.574 2.9463-7.779 4.8579-13.147 7.8455-13.381 7.4556-0.2354-0.39166 4.8352-3.6731 12.082-7.8487-0.41933-0.99852-0.84546-2.0283-1.2827-3.0962 2.5714-0.3366 5.2739-0.68238 8.1228-1.0431 2e-3 -2.82e-4 0.38312-0.04848 0.38535-0.04876-1.2648 2.8038-2.466 5.4564-3.6026 7.9487-0.65818-0.5755-1.2956-1.1383-1.915-1.6923-6.9366 4.6109-12.102 7.6784-12.346 7.2993z\"/>\r\n            <path id=\"path819-6-9-2-4-8\" d=\"m130.36 176.98c0.37804-0.32949 4.8698 4.5005 11.213 12.082-0.7289 0.56605-1.4812 1.1436-2.2603 1.7366 2.4529 0.80188 5.0237 1.6486 7.7216 2.5427 6e-5 2e-5 0.11567 0.0383 0.11573 0.0384-0.64419-2.3145-1.2453-4.4881-1.8264-6.633-1.155 0.63183-2.2666 1.234-3.3444 1.8095-6.3394-7.5683-10.319-12.829-9.9405-13.139 0.37974-0.31053 4.6745 4.552 10.286 11.596 1.1492-0.48476 2.3376-0.97766 3.5731-1.484 0.63669 2.7365 1.2929 5.6032 1.9826 8.6354 7e-5 3e-5 -0.14287-0.0465-0.1428-0.0465-3.3295-1.0841-6.5134-2.1261-9.4614-3.0968 0.63309-0.70117 1.252-1.3803 1.8612-2.0405-6.0563-6.6489-10.158-11.67-9.7776-12.002z\"/>\r\n            <path id=\"path819-6-9-2-4-3-1\" d=\"m115.7 182.33c0.58643-0.055 1.63 7.9514 2.6014 19.964-1.0663 0.22999-2.1622 0.45931-3.2933 0.69065 1.7705 2.3151 3.5802 4.7004 5.5014 7.2418-1e-3 4e-3 0.15371-0.47775 0.15227-0.47328 0.91847-2.854 1.7889-5.5441 2.6509-8.1733-1.5024 0.0596-2.9491 0.11208-4.3505 0.15602-0.98672-12.083-1.2402-20.206-0.64102-20.244 0.60188-0.0383 1.367 7.9152 1.8565 18.965 1.407 0.0791 2.8537 0.16782 4.3505 0.26502-1.1323 3.218-2.3316 6.5962-3.5999 10.154-1e-3 4e-3 -0.20901 0.58616-0.21046 0.59023-2.4982-3.1358-4.8554-6.1031-7.0708-8.9082 1.0589-0.44966 2.0911-0.88208 3.1024-1.2981-1.1817-10.946-1.6376-18.875-1.0493-18.93z\"/>\r\n            <path id=\"path819-8-0-6-1\" d=\"m139.92 97.783c-0.50363-0.30543 3.4319-7.3555 9.814-17.579 0.99318 0.45107 2.0097 0.92032 3.0557 1.4089-0.0412-2.9142-0.072-5.9082-0.0993-9.0939 4e-3 -0.0027-0.40824 0.29192-0.40442 0.28919-2.4389 1.7437-4.7415 3.3845-7.0011 4.9814 1.2418 0.84784 2.4345 1.6682 3.5858 2.4685-6.4116 10.289-11.051 16.961-11.554 16.635-0.50608-0.32806 3.6215-7.1696 9.816-16.332-1.0824-0.90233-2.191-1.8361-3.3348-2.8064 2.8276-1.9085 5.8045-3.9057 8.9439-6.0058 4e-3 -0.0024 0.51727-0.34599 0.52086-0.34839 0.13618 4.007 0.25952 7.7945 0.36574 11.367-1.1182-0.27032-2.2047-0.53852-3.2647-0.80741-5.5774 9.4926-9.9381 16.13-10.443 15.823z\"/>\r\n            <path id=\"path819-6-9-2-4-3-1-3\" d=\"m95.394 182.02c0.47304-0.14038 2.3332 5.3635 4.6607 13.91-1.0331 0.23196-2.1052 0.46408-3.2244 0.70015 1.9377 1.34 4.2359 2.9268 6.3822 4.4175-1.6e-4 -1.1e-4 0.10144 0.0705 0.10128 0.0703 0.65579-2.1105 1.2966-4.154 1.9118-6.1027-1.5039 0.20404-2.9318 0.39024-4.3015 0.55752-2.3034-8.5473-3.4914-14.237-3.0214-14.356 0.47178-0.11933 2.1025 5.3502 3.9244 13.105 1.3928-0.0327 2.8391-0.0546 4.3554-0.0692-0.76436 2.5468-1.5924 5.2896-2.4508 8.1129-1.5e-4 -1.2e-4 -0.1234-0.0924-0.12355-0.0925-2.657-1.9889-5.3906-4.0443-7.7223-5.7973 0.99711-0.42713 1.9618-0.83335 2.9033-1.2202-2.4525-7.5706-3.8708-13.095-3.3951-13.236z\"/>\r\n        </g>\r\n        <g id=\"eyes\" fill=\"#e6e6e6\" stroke=\"#000\">\r\n            <path id=\"path1073\" d=\"m75.038 116.41c1.4532 1.3118 3.209 2.3774 4.9322 3.4423 3.3568 2.058 7.036 3.6983 10.755 5.2281 1.8162 0.7522 3.6452 1.4804 5.4687 2.2192l-4.0245 1.1633c-1.7787-0.76456-3.5687-1.508-5.3594-2.2513-3.7195-1.5835-7.4031-3.2466-10.811-5.2827-1.7947-1.079-3.6245-2.1429-5.1771-3.4562l4.2161-1.0628z\" strokeWidth=\"3.5638\" style={{paintOrder:\"stroke fill markers\"}}/>\r\n            <path id=\"path1075\" d=\"m121.6 126.65c2.1988-0.52277 4.3524-1.1666 6.4415-1.9082 1.5031-0.67187 5.8605-2.2788-1.265 0.59495-0.35522 0.14326 0.672-0.33687 1.0024-0.51166 0.41828-0.22128 1.3652-0.75433 1.787-0.99039 1.3835-0.77991 2.7387-1.5906 3.8692-2.5862 0.74944-0.60644 1.1686-1.3678 1.6097-2.1168 0.32008-0.47375 0.53887-0.98228 0.74383-1.4908 0.11892-0.48275 0.29537-0.95402 0.44497-1.4312l4.777-1.7733c-0.11879 0.49359-0.36406 0.95683-0.43584 1.4575-0.1773 0.53429-0.41063 1.0644-0.71396 1.5636-0.52565 0.74331-0.82126 1.592-1.6003 2.2202-0.27377 0.25611-0.67413 0.64327-0.9777 0.87295-0.88886 0.67252-1.9287 1.2235-2.9003 1.8197-0.91652 0.51137-1.8161 1.084-2.7875 1.533-2.4786 1.1458-4.958 2.325-7.5733 3.2874-2.1563 0.73291-4.3613 1.38-6.5994 1.9509l4.1777-2.4917z\" strokeWidth=\"4.0567\" style={{paintOrder:\"stroke fill markers\"}}/>\r\n        </g>\r\n    </g>\r\n</svg>;","import { createAction,handleAction } from 'redux-actions';\r\nimport { createRoutine } from 'redux-saga-routines';\r\n\r\n\r\n/**\r\n * Services\r\n */\r\n\r\n\r\n\r\n\r\n\r\nexport const changeSimulation = createAction('CHANGE_SIMULATION');\r\nexport const removeCountrySelected = createAction('REMOVE_COUNTRY_SELECTED');\r\nexport const addCountrySelected = createAction('ADD_COUNTRY_SELECTED');\r\nexport const changeCountrySelected = createAction('CHANGE_COUNTRY_SELECTED');\r\n\r\nexport const processRawData = createRoutine('PROCESS_RAW_DATA');\r\n\r\nexport const confirmedRawData = createAction('CONFIRMED_RAW_DATA');\r\nexport const deathsRawData = createAction('DEATHS_RAW_DATA');","/**\r\n * Created by Monster on 2019-04-11.\r\n */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default class ToogleSwitch extends React.PureComponent{\r\n\r\n    render(){\r\n        const {checked,disabled,label,onChangeToggle,wrapperClassName,...restProps}=this.props;\r\n\r\n        return  <div className=\"switch switch--default\" onClick={()=>{onChangeToggle(this.props.name,!checked)}} {...restProps}>\r\n            <div className={\"switch-toggle switch-toggle--\"+(checked?'on':'off')}/>\r\n        </div>\r\n    }\r\n}\r\n\r\nToogleSwitch.propTypes={\r\n    checked:PropTypes.bool.isRequired,\r\n    disabled:PropTypes.bool.isRequired,\r\n    wrapperClassName:PropTypes.string,\r\n    onChangeToggle:PropTypes.func.isRequired,\r\n   // label:PropTypes.object.isRequired,\r\n};\r\n","/**\r\n * Created by Monster on 2020-03-16.\r\n */\r\n\r\n\r\nimport React from \"react\";\r\n\r\nimport {connect} from \"react-redux\";\r\n\r\nimport * as Actions from \"../actions/virusActions\"\r\n\r\nimport ChartJs from \"chart.js\";\r\nimport Hammer from \"hammerjs\";\r\nimport zoom from 'chartjs-plugin-zoom'\r\n\r\n\r\nimport  rk4 from \"ode-rk4\";\r\n\r\nimport regressionFunction from \"regression\";\r\nimport Select from 'react-select';\r\n\r\nimport ToggleSwitch from \"../../../common/components/buttons/ToogleSwitch\";\r\n\r\nconst regressionTypes = [{label:'Linear',value:\"linear\"},{label:'Exponencial',value:'exponential'},{label:'Quadrática',value:'polynomial'}];\r\n\r\nconst plotYTypes = [{label:' Y Linear',value:'linear'},{label:'Y Logaritimica',value:\"logarithmic\"}];\r\n\r\n\r\nconst dataTypes = [{label:'Infeções Confirmadas',value:'confirmed'},{label:'Mortes',value:\"deaths\"}];\r\n\r\nconst graphTypes = [{label:'Factor de Crescimento',value:'growthFactorGraph'},{label:'Totais',value:\"totalGraph\"},{label:'Novos',value:\"newGraph\"},{label:\"Novos/Totais\",value:\"newTotals\"}];\r\n\r\nconst colors = [\"#c7af53\",\"#c7459f\",\"#6047c7\",\"#1742c7\",\"#29c3c7\",\"#3ac760\",\"#37311d\"]\r\n\r\nclass ChartComponent extends React.PureComponent{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.chartRef = React.createRef();\r\n        this.chartObject = null;\r\n\r\n        this.state = {\r\n            plotYType:plotYTypes[0].value,\r\n            growthFactorGraph:graphTypes[0].value,\r\n\r\n        };\r\n\r\n        this.currentRegressionFormula = null\r\n        this.formulaRef = React.createRef();\r\n\r\n\r\n        /*   this.renderChart=this.renderChart.bind(this);*/\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(oldProps,oldState){\r\n\r\n       /* if(oldProps.initDeathsRecords === false || oldProps.initConfirmedRecords && this.props.initConfirmedRecords === true && this.props.initDeathsRecords === true ){\r\n            this.renderChart()\r\n        }*/\r\n\r\n       /* if(oldProps.simulation !== this.props.simulation ){\r\n            this.renderChart()\r\n        }\r\n\r\n        if(oldProps.countrySelectedList !== this.props.countrySelectedList ){\r\n\r\n        }*/\r\n\r\n        this.renderChart()\r\n    }\r\n\r\n    handleSelect(type,value){\r\n\r\n        if(value !== null){\r\n            this.props.changeSimulation(type,value);\r\n        }else{\r\n            this.props.changeSimulation(type,null);\r\n        }\r\n    }\r\n\r\n    handleChangeCountry(index,value){\r\n        this.props.dispatch(Actions.changeCountrySelected({index,value:value!==null?value.value:value}));\r\n    }\r\n\r\n    renderFormulaInject(){\r\n\r\n        if(this.formulaRef.current !== null){\r\n            console.debug(\"Formula current = \",this.formulaRef.current)\r\n            this.formulaRef.current.innerHTML=\"\"+this.currentRegressionFormula.formulaString +\" r2 (coeficiente de determinação) = \"+(this.currentRegressionFormula.r2*100)\r\n        }\r\n\r\n    }\r\n\r\n    renderChart(){\r\n\r\n\r\n\r\n        console.debug(\"Render chart now..\")\r\n    //build data sets\r\n    const {countrySelectedList,rawConfirmedData,rawDeathData,availableConfirmedDates,availableDeathDates,simulateSIR,dataType,useRegressionTypeIndex,simulationAddDays,useModelFromOtherCountry,\r\n        fromDayWithGreaterThan,onlyLastXDays,lastXDays,onlyFirstXDays,firstXDays,graphType,availableConfirmedCountries,availableDeathCountries,\r\n        regression,population,transmitionRate,recoverTime,maxTimeSimulate\r\n\r\n\r\n\r\n    } = this.props;\r\n\r\n        if((!this.props.initDeathRecords && dataType === 'deaths')){\r\n            return null;\r\n        }\r\n\r\n        if((!this.props.initConfirmedRecords  && dataType === 'confirmed')){\r\n            return null;\r\n        }\r\n\r\n\r\n    let validCountriesIndex = [];\r\n\r\n    for(let s = 0;s < countrySelectedList.length;s++){\r\n        const selected = countrySelectedList[s].value;\r\n        if(selected !== null && typeof  selected !== 'undefined' ){\r\n            validCountriesIndex.push(s);\r\n        }\r\n    }\r\n\r\n\r\n    console.debug(\"Valid country indexs = \",validCountriesIndex)\r\n    if(validCountriesIndex.length===0){\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n\r\n    const useSeveralCountries = validCountriesIndex.length>1;\r\n\r\n    let availableDates = availableConfirmedDates;\r\n    let availableCountries = availableConfirmedCountries;\r\n\r\n    let rawData = rawConfirmedData;\r\n    if(dataType === dataTypes[1].value){\r\n        console.debug(\"Death data now \",rawDeathData)\r\n        rawData = rawDeathData;\r\n        availableDates = availableDeathDates;\r\n        availableCountries = availableDeathCountries;\r\n    }\r\n    console.debug(\"Raw data = \",rawData===rawDeathData)\r\n\r\n\r\n\r\n\r\n\r\n    let allCountriesData = [];\r\n    let allCountriesDays = [];\r\n\r\n        let text = \"\";\r\n        switch (dataType){\r\n            case dataTypes[0].value:text = dataTypes[0].label;break;\r\n            case dataTypes[1].value:text = dataTypes[1].label;break;\r\n        }\r\n        console.debug(\"Text tipes \",text)\r\n\r\n\r\n      switch (graphType){\r\n          case graphTypes[0].value:text +=\" \"+ graphTypes[0].label;break;\r\n          case graphTypes[1].value:text +=\" \"+ graphTypes[1].label;break;\r\n          case graphTypes[2].value:text +=\" \"+ graphTypes[2].label;break;\r\n      }\r\n      text=\" \"+text;\r\n        let graphInfo = {};\r\n\r\n        //special type of grapth new/total\r\n        if(graphType === graphTypes[3].value){\r\n            let finalLabelArray = [];\r\n            let logX = 10;\r\n            for(let d = 1;d<=100;d++){\r\n\r\n                    if(logX>1000000){\r\n                        break;\r\n                    }\r\n                    //total cases in logaritimc scale on x\r\n                    finalLabelArray.push(logX);\r\n                    logX*=10;\r\n\r\n\r\n\r\n            }\r\n            //ok now data\r\n            for(let s = 0;s < validCountriesIndex.length;s++){\r\n                const index = validCountriesIndex[s];\r\n                const selected = countrySelectedList[index];\r\n                //get the value\r\n                //   console.debug(\"Selectexd = \",selected)\r\n                if(typeof  selected !== 'undefined'){\r\n                    const name = selected.value;\r\n                    //get from the actual list\r\n                    const country = availableCountries[name];\r\n                    if(typeof country !== 'undefined'){\r\n                        const idx = country.index;\r\n                        const color = colors[index];\r\n\r\n\r\n                        let result = generateDataSetXY(rawData,idx,availableDates,graphType,fromDayWithGreaterThan,text,color);\r\n\r\n                        console.debug(\"Result xy = \",result)\r\n                        allCountriesData.push(result.countryDataSet);\r\n                        //interpolation\r\n                       // allCountriesData.push({...result.countryDataSet,label:result.countryDataSet.label+\" interpolation\",cubicInterpolationMode: 'monotone'});\r\n\r\n                    }\r\n                }\r\n            }\r\n            graphInfo.datasets=allCountriesData;\r\n            //interpolation\r\n          //  let countryDataSet = {data:[],fill:false,backgroundColor:color,borderColor:color,label:countryData[0]+text};\r\n            graphInfo.labels = finalLabelArray;\r\n\r\n            if(this.chartObject!==null){\r\n                this.chartObject.destroy();\r\n            }\r\n\r\n\r\n            this.chartObject = new ChartJs(this.chartRef.current.getContext('2d'), {\r\n                type: 'scatter',\r\n\r\n                data:{...graphInfo},\r\n                options: {\r\n                    responsive: true,\r\n                    scales: {\r\n                        yAxes: [{\r\n                            type:'linear',\r\n\r\n                            ticks: {\r\n\r\n                                beginAtZero: true,\r\n                                max: graphType===graphTypes[1]?10:undefined,\r\n                                min: 0,\r\n\r\n                            }\r\n                        }]\r\n                    },\r\n                    plugins: {\r\n                        zoom: {\r\n                            pan: {\r\n                                enabled: true,\r\n                                mode: 'xy' // is panning about the y axis neccessary for bar charts?\r\n                            },\r\n                            zoom: {\r\n                                enabled: true,\r\n                                mode: 'x',\r\n                                sensitivity: 3\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n            });\r\n\r\n            return;\r\n\r\n        }\r\n\r\n\r\n        for(let s = 0;s < validCountriesIndex.length;s++){\r\n            const index = validCountriesIndex[s];\r\n            const selected = countrySelectedList[index];\r\n            //get the value\r\n         //   console.debug(\"Selectexd = \",selected)\r\n            if(typeof  selected !== 'undefined'){\r\n                const name = selected.value;\r\n                //get from the actual list\r\n                const country = availableCountries[name];\r\n                if(typeof country !== 'undefined'){\r\n                    const idx = country.index;\r\n                    const color = colors[index];\r\n                    let result = generateDataSet(rawData,idx,availableDates,graphType,fromDayWithGreaterThan,text,color);\r\n                    allCountriesData.push(result.countryDataSet);\r\n                    allCountriesDays.push(result.countryDays);\r\n                }\r\n            }\r\n        }\r\n\r\n        let finalLabelArray = allCountriesDays[0];\r\n        if(typeof finalLabelArray === 'undefined'){\r\n            finalLabelArray = [];\r\n        }\r\n\r\n    if(onlyFirstXDays){\r\n        for(let s = 0;s < allCountriesData.length;s++){\r\n            const countryDataSet = allCountriesData[s];\r\n            countryDataSet.data = countryDataSet.data.slice(0,Math.min( firstXDays, countryDataSet.data.length));\r\n            finalLabelArray = finalLabelArray.slice(0,Math.min( firstXDays, finalLabelArray.length));\r\n        }\r\n\r\n    }\r\n\r\n    if(onlyLastXDays){\r\n        //do he have more that x\r\n        //get only the last x days\r\n        for(let s = 0;s < allCountriesData.length;s++){\r\n            const countryDataSet = allCountriesData[s];\r\n                countryDataSet.data = countryDataSet.data.slice(Math.max( countryDataSet.data.length - lastXDays, 0));\r\n                finalLabelArray = finalLabelArray.slice(Math.max( finalLabelArray.length - lastXDays, 0));\r\n        }\r\n    }\r\n\r\n    console.debug(\"Final days count = \",finalLabelArray.length)\r\n\r\n    console.debug(\"All countries data = \",allCountriesData)\r\n\r\n        //ok if the 2 check witch one if bigger and make a new data array a final one\r\n       // let finalLabelArray = [];\r\n        if(useSeveralCountries){\r\n            //make new one based on days\r\n            //get a max from all\r\n            let maxDays = 0;\r\n            let restrictDays = false;\r\n            if(onlyFirstXDays|| onlyLastXDays){\r\n                restrictDays = true;\r\n            }\r\n            console.debug(\"All country days = \",allCountriesDays)\r\n         //   if(!restrictDays){\r\n\r\n               if(!restrictDays){\r\n                   for(let d = 0;d<allCountriesDays.length;d++){\r\n\r\n                       maxDays = Math.max(maxDays,allCountriesDays[d].length)\r\n                   }\r\n               }else{\r\n                   maxDays = finalLabelArray.length;\r\n               }\r\n\r\n\r\n                console.debug(\"Max days = \",maxDays)\r\n                finalLabelArray = [];\r\n\r\n                for(let d = 1;d<=maxDays;d++){\r\n\r\n\r\n                    finalLabelArray.push(\"dia \"+d);\r\n                }\r\n        //    }\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n        let datasets = allCountriesData;\r\n\r\n\r\n\r\n\r\n    graphInfo.labels = finalLabelArray;\r\n    graphInfo.datasets = datasets;\r\n\r\n\r\n    if(regression){\r\n\r\n        const idx = validCountriesIndex[0];\r\n        const selected = countrySelectedList[idx];\r\n        const country = availableConfirmedCountries[selected.value];\r\n\r\n        const countryData = rawData[country.index];\r\n\r\n        let regressionTrainingDataSet = [];\r\n\r\n        if(useModelFromOtherCountry!== null){\r\n            //fix this\r\n           /* const otherCountryData = rawData[useModelFromOtherCountry.index];\r\n\r\n            let index = 1;\r\n            for(let d = 1;d<otherCountryData.length;d++){\r\n                const value = otherCountryData[d];\r\n                if(value>=fromDayWithGreaterThan){\r\n\r\n                    regressionTrainingDataSet.push([index,value]);\r\n                    index++;\r\n                }\r\n            }*/\r\n\r\n        }else{\r\n            regressionTrainingDataSet=allCountriesData[0].data.map((value,index)=>{\r\n                return [(index+1),value]\r\n            });\r\n        }\r\n\r\n\r\n        const regressionType = regressionTypes[useRegressionTypeIndex].value;\r\n        let config = {};\r\n        if(regressionType === 'polynomial'){\r\n            config.order = 2\r\n        }\r\n\r\n       // console.debug(\"Regression type = \",regressionType)\r\n       // console.debug(\"Primary data set = \",allCountriesData[0].data)\r\n      //  console.debug(\"Regression data = \",regressionTrainingDataSet)\r\n        const simulatedData = regressionFunction[regressionType](regressionTrainingDataSet,config)\r\n     //   console.debug(\"Simulated data = \",simulatedData)\r\n        //add data set\r\n        this.currentRegressionFormula = {formulaString:simulatedData.string,equation:simulatedData.equation,\"r2\":simulatedData.r2};\r\n        this.renderFormulaInject();\r\n      /*  this.setState({\r\n            currentRegressionFormula: {formulaString:simulatedData.string,equation:simulatedData.equation}\r\n        });*/\r\n        //add days\r\n\r\n\r\n      //  let firstDay = new Date(totalRecordsCompileDaysOrder[0]);\r\n        const addDays =simulationAddDays;\r\n        if(!useSeveralCountries){\r\n\r\n            const lastDay = new Date(finalLabelArray[finalLabelArray.length-1]);\r\n\r\n            console.debug(\"Last day = \",lastDay)\r\n            for(let d = 1;d<=addDays;d++){\r\n                let newDate = new Date(lastDay);\r\n                newDate.setDate(newDate.getDate()+d);\r\n\r\n                finalLabelArray.push(`${newDate.getUTCFullYear()}-${newDate.getUTCMonth()+1}-${newDate.getUTCDate()} (+${d})`);\r\n            }\r\n        }else{\r\n\r\n           /* const countryData = rawData[index];\r\n            //get first case\r\n            let countDateFrom = 1;\r\n            for(let d = countDateFrom;d<countryData.length;d++){\r\n                const value = countryData[d];\r\n\r\n                if(value > 0 && fromDayWithGreaterThan <= value ){\r\n                    countDateFrom = d;\r\n                    break\r\n                }\r\n            }*/\r\n\r\n            const initial = finalLabelArray.length;\r\n            let logX = 10;\r\n            for(let d = 1;d<=addDays;d++){\r\n                if(graphType === graphTypes[3].value){\r\n                    //total cases in logaritimc scale on x\r\n                    finalLabelArray.push(logX);\r\n                    logX*=10;\r\n                }else{\r\n                    finalLabelArray.push(`${\"dia \"+(d+initial)} +(${d})`);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        let newDataSet = [];\r\n\r\n        finalLabelArray.forEach((value,index)=>{\r\n\r\n            newDataSet.push(simulatedData.predict(index+1)[1]);\r\n        });\r\n\r\n\r\n        //generate more points for regression\r\n        graphInfo.datasets.push({data:newDataSet,fill:false,borderColor:\"#2f5fe4\",label:countryData[0]+' Regressão '+text});\r\n        graphInfo.labels = finalLabelArray;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    if(simulateSIR){\r\n       // graphInfo.datasets = [];\r\n        const idx = validCountriesIndex[0];\r\n        const selected = countrySelectedList[idx];\r\n        const country = availableConfirmedCountries[selected.value];\r\n\r\n        const countryData = rawData[country.index];\r\n\r\n        const step =1;\r\n\r\n        //calculate starting infected population\r\n        const totalInfected = countryData[countryData.length-3];\r\n        console.debug(\"Last result total = \",totalInfected)\r\n        const i0 = totalInfected/population;\r\n        console.debug(\"I0 = \",i0)\r\n        //http://epirecip.es/epicookbook/chapters/sir/js\r\n        const sir_sol = simulate(0,[1.0-i0,i0,0.0],step,maxTimeSimulate,transmitionRate,recoverTime);\r\n\r\n        console.debug(\"Sir sol = \",sir_sol)\r\n        const S = sir_sol.y.map((x)=>{return x[0]});\r\n        const I = sir_sol.y.map((x)=>{return x[1]*population});\r\n        const R = sir_sol.y.map((x)=>{return x[2]});\r\n\r\n        let fillArray = new Array(graphInfo.labels.length-1);\r\n        I.shift();\r\n        const data = fillArray.concat(I);\r\n\r\n\r\n      //  graphInfo.datasets.push({data:R,fill:false,borderColor:\"#771b0f\",label:' Simulação R'+text});\r\n        graphInfo.datasets.push({data:data,fill:false,borderColor:\"#84b7e4\",label:' Simulação I'+text});\r\n    //    graphInfo.datasets.push({data:S,fill:false,borderColor:\"#c49de4\",label:' Simulação S'+text});\r\n        graphInfo.labels = [...graphInfo.labels,...sir_sol.t.map(t=> {return t+1})];\r\n\r\n    }\r\n\r\n    console.debug(\"Data = \",graphInfo);\r\n\r\n    if(this.chartObject!==null){\r\n        this.chartObject.destroy();\r\n    }\r\n\r\n\r\n    this.chartObject = new ChartJs(this.chartRef.current.getContext('2d'), {\r\n        type: 'line',\r\n\r\n        data:{...graphInfo},\r\n        options: {\r\n            responsive: true,\r\n            scales: {\r\n                yAxes: [{\r\n                    type:this.state.plotYType,\r\n\r\n                    ticks: {\r\n\r\n                        beginAtZero: true,\r\n                        max: graphType===graphTypes[1]?10:undefined,\r\n                        min: 0,\r\n\r\n                    }\r\n                }]\r\n            },\r\n            plugins: {\r\n            zoom: {\r\n                pan: {\r\n                    enabled: true,\r\n                        mode: 'xy' // is panning about the y axis neccessary for bar charts?\r\n                },\r\n                zoom: {\r\n                    enabled: true,\r\n                        mode: 'x',\r\n                        sensitivity: 3\r\n                }\r\n            }\r\n        }\r\n        },\r\n\r\n    });\r\n}\r\n\r\n\r\n\r\n    renderCountries(){\r\n        const { countrySelectedList,availableConfirmedCountries,\r\n            } = this.props;\r\n\r\n        const allowMoreCountries = countrySelectedList.length<colors.length;\r\n\r\n\r\n        return  <div className=\"countryFromGroup\">\r\n                    {countrySelectedList.map((countrySelect,index)=>{\r\n\r\n                        return  <div key={countrySelect.value+\"-\"+index} className=\"inputGroup\">\r\n\r\n\r\n                            <label>Pais {index+1}</label>\r\n                            <Select\r\n                                isClearable\r\n                                classNamePrefix=\"selectCountry\"\r\n                                value={countrySelect}\r\n                                onChange={(newValue)=>{  this.handleChangeCountry(index,newValue);  console.debug(\"CreateNew value select = \",newValue)  }}\r\n                                options={Object.values(availableConfirmedCountries)}\r\n\r\n\r\n                            />\r\n                            <div className=\"removeCountry\" onClick={()=>{this.props.dispatch(Actions.removeCountrySelected({index}))}}>\r\n                                - remover\r\n                            </div>\r\n\r\n                        </div>\r\n                    })}\r\n\r\n            {allowMoreCountries?<div className=\"addCountry\" onClick={()=>{this.props.dispatch(Actions.addCountrySelected())}}>\r\n                + adicionar pais\r\n\r\n            </div>:null}\r\n\r\n        </div>\r\n\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n\r\n        const {\r\n                simulate,regression,useRegressionTypeIndex,simulationAddDays,\r\n                fromDayWithGreaterThan,\r\n                 onlyLastXDays,lastXDays,graphType,dataType,\r\n                 onlyFirstXDays,firstXDays,population,transmitionRate,recoverTime,maxTimeSimulate,simulateSIR\r\n        } = this.props;\r\n\r\n\r\n       return <div className=\"chartWrapper\">\r\n\r\n\r\n           <div className=\"inputsWrapper\">\r\n\r\n               <div className=\"inputGroup\">\r\n                   <label>Tipo de dados</label>\r\n                   <select className=\"select\" name=\"regressionType\" value={dataType} onChange={(evt)=>{\r\n\r\n                       this.props.changeSimulation('dataType',evt.currentTarget.value)\r\n\r\n                   }}>\r\n                       {dataTypes.map((type,index)=>{\r\n                           return <option key={index} value={type.value}>{type.label}</option>\r\n                       })}\r\n                   </select>\r\n               </div>\r\n               <div className=\"inputGroup\">\r\n                   <label>Tipo de sub dados</label>\r\n                   <select className=\"select\" name=\"regressionType\" value={graphType} onChange={(evt)=>{\r\n\r\n                       this.props.changeSimulation('graphType',evt.currentTarget.value)\r\n\r\n                   }}>\r\n                       {graphTypes.map((type,index)=>{\r\n                           return <option key={index} value={type.value}>{type.label}</option>\r\n                       })}\r\n                   </select>\r\n               </div>\r\n\r\n               <div className=\"countryFromGroup\">\r\n\r\n                   {this.renderCountries()}\r\n\r\n               </div>\r\n\r\n\r\n               <div className=\"inputGroup\">\r\n                   <label>apartir do dia com >= casos</label>\r\n                   <input type=\"number\" max={5000} value={fromDayWithGreaterThan} onChange={(evt)=>{\r\n\r\n                       this.props.changeSimulation('fromDayWithGreaterThan',   Number.parseInt(evt.currentTarget.value));\r\n                   }}/>\r\n               </div>\r\n               <div className=\"inputGroup toggle\">\r\n                   <label> ver só ultimos x dias</label>\r\n                   <ToggleSwitch disabled={false} checked={onlyLastXDays} onChangeToggle={()=>{\r\n                       this.props.changeSimulation('onlyLastXDays',!onlyLastXDays)\r\n                   }}/>\r\n               </div>\r\n               <div className=\"inputGroup\">\r\n                   <label>ultimos x dias</label>\r\n                   <input type=\"number\" max={120} min={2} value={lastXDays} disabled={!onlyLastXDays} onChange={(evt)=>{\r\n\r\n                       this.props.changeSimulation('lastXDays',   Number.parseInt(evt.currentTarget.value));\r\n                   }}/>\r\n               </div>\r\n\r\n               <div className=\"inputGroup toggle\">\r\n                   <label> ver só primeiros x dias</label>\r\n                   <ToggleSwitch disabled={false} checked={onlyFirstXDays} onChangeToggle={()=>{\r\n                       this.props.changeSimulation('onlyFirstXDays',!onlyFirstXDays)\r\n                   }}/>\r\n               </div>\r\n               <div className=\"inputGroup\">\r\n                   <label>primeiros x dias</label>\r\n                   <input type=\"number\" max={120} min={2} value={firstXDays} disabled={!onlyFirstXDays} onChange={(evt)=>{\r\n\r\n                       this.props.changeSimulation('firstXDays',   Number.parseInt(evt.currentTarget.value));\r\n                   }}/>\r\n               </div>\r\n\r\n\r\n           </div>\r\n\r\n           <div className=\"simulateWrapper\">\r\n               <div className=\"header\">\r\n                   <div className=\"block\">\r\n                   <div className=\"inputGroup\">\r\n                       <label>Activar Regressão</label>\r\n                       <ToggleSwitch disabled={false} checked={regression} onChangeToggle={()=>{\r\n                           this.props.changeSimulation('regression',!regression)\r\n                       }}/>\r\n                   </div>\r\n                   </div>\r\n\r\n               </div>\r\n               <div className=\"body\">\r\n                   <div className=\"block\">\r\n                       <div className=\"inputGroup\">\r\n                           <label>Tipo de Regressão</label>\r\n                           <select className=\"select\" name=\"regressionType\" value={useRegressionTypeIndex} onChange={(evt)=>{\r\n                               console.debug(\"Event \",evt)\r\n                               this.props.changeSimulation('useRegressionTypeIndex',Number.parseInt(evt.currentTarget.value))\r\n\r\n                           }}>\r\n                               {regressionTypes.map((type,index)=>{\r\n                                   return <option key={index} value={index}>{type.label}</option>\r\n                               })}\r\n                           </select>\r\n                       </div>\r\n                       <div className=\"inputGroup\">\r\n                           <label>Eixo Y tipo escala</label>\r\n                           <select className=\"select\" name=\"regressionType\" value={this.state.plotYType} onChange={(evt)=>{\r\n                               console.debug(\"Event \",evt)\r\n                               this.setState({\r\n                                   plotYType:evt.target.value\r\n                               })\r\n\r\n                           }}>\r\n                               {plotYTypes.map((type,index)=>{\r\n                                   return <option key={index} value={type.value}>{type.label}</option>\r\n                               })}\r\n                           </select>\r\n                       </div>\r\n                      {/* <div className=\"inputGroup\">\r\n\r\n                           <label>Usar modelo de outro pais</label>\r\n                           <Select\r\n                               isClearable\r\n                               classNamePrefix=\"selectCountryPopup\"\r\n                               value={useModelFromOtherCountry}\r\n                               onChange={(newValue)=>{  this.handleSelect('useModelFromOtherCountry',newValue);  console.debug(\"CreateNew value select = \",newValue)  }}\r\n                               options={Object.values(availableCountries)}\r\n\r\n\r\n                           />\r\n\r\n                       </div>*/}\r\n\r\n\r\n                       <div className=\"inputGroup\">\r\n                           <label>Numero de dias previsão</label>\r\n                           <input type=\"number\" max={60} value={simulationAddDays} onChange={(evt)=>{\r\n\r\n                               this.props.changeSimulation('simulationAddDays',   Number.parseInt(evt.currentTarget.value));\r\n                           }}/>\r\n                       </div>\r\n\r\n\r\n                   </div>\r\n                 <div className=\"block formula\" ref={this.formulaRef}>\r\n\r\n\r\n\r\n                   </div>\r\n\r\n\r\n               </div>\r\n\r\n\r\n\r\n\r\n           </div>\r\n           <div className=\"simulateWrapper\">\r\n               <div className=\"header\">\r\n                   <div className=\"block\">\r\n                       <div className=\"inputGroup\">\r\n                           <label>Simular (SIR model)</label>\r\n                           <ToggleSwitch disabled={false} checked={simulateSIR} onChangeToggle={()=>{\r\n                               this.props.changeSimulation('simulateSIR',!simulateSIR)\r\n                           }}/>\r\n                       </div>\r\n                   </div>\r\n\r\n               </div>\r\n               <div className=\"body\">\r\n                   <div className=\"block\">\r\n                   <div className=\"inputGroup\">\r\n                       <label>População Susceptivel</label>\r\n                       <input type=\"number\" max={1000000000} value={population} onChange={(evt)=>{\r\n\r\n                           this.props.changeSimulation('population',Number.parseInt(evt.currentTarget.value));\r\n                       }}/>\r\n                   </div>\r\n                   <div className=\"inputGroup\">\r\n                       <label>Taxa de Transmissão</label>\r\n                       <input type=\"number\" max={10.0} min={0.0} step=\"0.001\" value={transmitionRate} onChange={(evt)=>{\r\n\r\n                           this.props.changeSimulation('transmitionRate',Number.parseFloat(evt.currentTarget.value));\r\n                       }}/>\r\n                   </div>\r\n\r\n                   <div className=\"inputGroup\">\r\n                       <label>Tempo de recuperação</label>\r\n                       <input type=\"number\" max={60.0} min={0.0} step=\"0.0001\" value={recoverTime} onChange={(evt)=>{\r\n\r\n                           this.props.changeSimulation('recoverTime',Number.parseFloat(evt.currentTarget.value));\r\n                       }}/>\r\n                   </div>\r\n\r\n                   <div className=\"inputGroup\">\r\n                       <label>Numero de dias previsão</label>\r\n                       <input type=\"number\" max={90} min={1} value={maxTimeSimulate} onChange={(evt)=>{\r\n\r\n                           this.props.changeSimulation('maxTimeSimulate',Number.parseInt(evt.currentTarget.value));\r\n                       }}/>\r\n                   </div>\r\n\r\n\r\n               </div>\r\n               </div>\r\n\r\n\r\n           </div>\r\n\r\n           <div className=\"chartHeader\">\r\n\r\n\r\n           </div>\r\n                    <div className=\"chartDiv\" >\r\n                        <canvas ref={this.chartRef} id=\"chart\" height={300} />\r\n\r\n                    </div>\r\n           <div className=\"otherInfo\">\r\n               <h4>Para mais informação sobre a propagação e porque são necessárias medidas de contenção visite <a target=\"_blank\" href=\"https://medium.com/@rafael.remondes/coronav%C3%ADrus-porque-%C3%A9-que-se-deve-agir-imediatamente-4674311fb09c\">(Corona vírus porque é necessário agir imediatamente )</a> para uma excelente analise sobre o o assunto.</h4>\r\n               <h6>Todos os dados usados são dados publicos a altura da publicação , retirados de <a target=\"_blank\" href=\"https://github.com/CSSEGISandData/COVID-19\">Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE</a> e a aplicação é puramente para fins educacionais.</h6>\r\n\r\n           </div>\r\n           <div className=\"madeBy\">\r\n               by André Bastos\r\n\r\n           </div>\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    //in this case we wan the props to be the same as the state including names\r\n\r\n    return {\r\n        ...state.records,\r\n        ...state.simulation\r\n\r\n\r\n\r\n    }\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        dispatch,\r\n\r\n        changeSimulation:(name,value)=>{\r\n            dispatch(Actions.changeSimulation({name,value}));\r\n\r\n        }\r\n\r\n    }\r\n};\r\n\r\n\r\nconst Chart =connect(mapStateToProps,mapDispatchToProps)(ChartComponent);\r\n\r\n\r\nexport default Chart;\r\n\r\n\r\n\r\n\r\nfunction generateDataSet(rawData,index,availableDates,graphType,fromDayWithGreaterThan,text,color) {\r\n\r\n    const countryData = rawData[index];\r\n    //get first case\r\n    let countDateFrom = 1;\r\n    for(let d = countDateFrom;d<countryData.length;d++){\r\n        const value = countryData[d];\r\n\r\n        if(value > 0 && fromDayWithGreaterThan <= value ){\r\n            countDateFrom = d;\r\n            break\r\n        }\r\n    }\r\n    console.debug(\"Count date from index = \",countDateFrom)\r\n    let countryDays = [];\r\n    let countryDataSet = {data:[],fill:false,backgroundColor:\"#88bae6e0\",borderColor:color,label:countryData[0]+text};\r\n    //build date array\r\n    console.debug(\"Data set = \",countryData)\r\n    for(let d = countDateFrom;d<availableDates.length;d++){\r\n        const value = availableDates[d].date;\r\n\r\n\r\n        countryDays.push(value);\r\n        const infected = countryData[d+1];\r\n        if(graphType === graphTypes[0].value){\r\n            //do we have a previus value\r\n            const lastDay = countryData[d]-countryData[d-1];\r\n            const current = infected - countryData[d];\r\n\r\n            if(lastDay === 0||isNaN(lastDay) ){\r\n                countryDataSet.data.push(1);\r\n            }else{\r\n                const grothFactor = current/lastDay;\r\n                console.debug(`last day = ${lastDay} current day = ${current} ratio = ${grothFactor}`)\r\n                //normalize this cant be real, accounting changes or error in data\r\n                if(grothFactor>10){\r\n                    countryDataSet.data.push(1);\r\n                }else{\r\n                    countryDataSet.data.push(grothFactor);\r\n                }\r\n\r\n            }\r\n        }else if(graphType === graphTypes[1].value){\r\n            countryDataSet.data.push(infected);\r\n        }else if(graphType === graphTypes[2].value){\r\n\r\n            let current = infected - countryData[d];\r\n            current = current>0?current:0;\r\n            //    console.debug(\"new infections = \",current)\r\n            countryDataSet.data.push(current);\r\n        }else if(graphType === graphTypes[3].value){\r\n\r\n            let current = infected - countryData[d];\r\n            //new infected\r\n            current = current>0?current:0;\r\n            //total\r\n            //    console.debug(\"new infections = \",current)\r\n            countryDataSet.data.push(current);\r\n        }\r\n\r\n    }\r\n    //build data set\r\n    return {countryDays:countryDays,countryDataSet:countryDataSet}\r\n}\r\n\r\nfunction generateDataSetXY(rawData,index,availableDates,graphType,fromDayWithGreaterThan,text,color) {\r\n\r\n    const countryData = rawData[index];\r\n    //get first case\r\n    let countDateFrom = 1;\r\n    for(let d = countDateFrom;d<countryData.length;d++){\r\n        const value = countryData[d];\r\n\r\n        if(value > 0 && fromDayWithGreaterThan <= value ){\r\n            countDateFrom = d;\r\n            break\r\n        }\r\n    }\r\n    console.debug(\"Count date from index = \",countDateFrom)\r\n\r\n    let countryDataSet = {data:[],fill:false,backgroundColor:color,borderColor:color,label:countryData[0]+text};\r\n    //build date array\r\n    console.debug(\"Data set = \",countryData)\r\n    for(let d = countDateFrom;d<10000;d++){\r\n\r\n            const infected = countryData[d+1];\r\n            if(typeof infected === 'undefined'){\r\n             break;\r\n            }\r\n        let newInfected = infected - countryData[d];\r\n        //new infected\r\n        newInfected = newInfected>0?newInfected:0;\r\n        //total\r\n        //    console.debug(\"new infections = \",current)\r\n        countryDataSet.data.push({x:infected,y:newInfected});\r\n    }\r\n    //build data set\r\n    return {countryDataSet:countryDataSet}\r\n}\r\n\r\n//simulate SIR\r\n\r\n\r\nfunction simulate(t0,y0,step,tmax,b,g) {\r\n    const f = function sir(dydt, y, t) {\r\n        dydt[0] = -b*y[0]*y[1];\r\n        dydt[1] = b*y[0]*y[1] - g*y[1];\r\n        dydt[2] = g*y[1];\r\n    };\r\n    let integrator = rk4(y0, f, t0, step);\r\n    let t = t0;\r\n    let y = y0;\r\n    let ta = [];\r\n    let ya = [];\r\n    ta.push(t0);\r\n    ya.push({...y});\r\n    while(true){\r\n        t = t+step;\r\n        if(t>tmax) break;\r\n        integrator=integrator.step();\r\n        ya.push({...integrator.y});\r\n        ta.push(t)\r\n    }\r\n    return {t:ta,y:ya};\r\n}\r\n\r\n\r\n\r\n","/**\r\n * Created by Monster on 2020-03-16.\r\n */\r\n\r\n\r\nimport React from \"react\";\r\nimport * as Svg from \"../svgs/svgs\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport * as Actions from \"../actions/virusActions\"\r\nimport Chart from \"./ChartComponent\"\r\nimport Papa from \"papaparse\";\r\n\r\nclass VirusAppComponent extends React.PureComponent{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n\r\n        const current = this;\r\n        let dataUrlConfirmed = \"/data/time_series_covid19_confirmed_global10.csv\";\r\n        let dataUrlDeaths = \"/data/time_series_covid19_deaths_global.csv\";\r\n\r\n       /* if(process.env.NODE_ENV === 'production'){\r\n            console.warn(\"Production url found..\");\r\n            dataUrlConfirmed = \"https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv\";\r\n        }*/\r\n        Papa.parse(dataUrlConfirmed, {\r\n            download: true,\r\n            dynamicTyping:true,\r\n\r\n            complete: function(results) {\r\n                console.log(results);\r\n                current.props.dispatch(Actions.processRawData.trigger({confirmed:true,records:{...results}}));\r\n            }\r\n        });\r\n\r\n        Papa.parse(dataUrlDeaths, {\r\n            download: true,\r\n            dynamicTyping:true,\r\n\r\n            complete: function(results) {\r\n                console.log(results);\r\n                current.props.dispatch(Actions.processRawData.trigger({deaths:true,records:results}));\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render(){\r\n\r\n       return <div className=\"appWrapper\">\r\n\r\n\r\n           <div className=\"title\">\r\n               <div className=\"logoBlock\">\r\n                   {Svg.virusLogo}\r\n               </div>\r\n               <div className=\"textBlock\">\r\n                   <h2>Dados e regressão (previsão baseado em dados anteriores) de propagação do virus sars-cov-2 em varios paises.</h2>\r\n\r\n\r\n               </div>\r\n\r\n\r\n           </div>\r\n\r\n                    <Chart/>\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    //in this case we wan the props to be the same as the state including names\r\n\r\n    return {\r\n\r\n\r\n\r\n\r\n    }\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        dispatch,\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n};\r\n\r\n\r\nconst VirusApp =connect(mapStateToProps,mapDispatchToProps)(VirusAppComponent);\r\n\r\n\r\nexport default VirusApp;","/**\r\n * Created by Monster on 2020-03-16.\r\n */\r\n\r\n\r\n\r\nimport { createAction,handleActions } from 'redux-actions';\r\nimport {combineReducers} from 'redux';\r\nimport * as Actions from \"../actions/virusActions\"\r\n\r\n\r\n\r\n\r\nconst simulationState = {\r\n\r\n\r\n    primaryCountry:null,\r\n    secondaryCountry:null,\r\n\r\n    countrySelectedList:[{value:null,label:null}],\r\n\r\n\r\n    graphType:'totalGraph',\r\n    dataType:'confirmed',\r\n\r\n\r\n\r\n\r\n    onlyLastXDays:false,\r\n    lastXDays:20,\r\n\r\n    onlyFirstXDays:false,\r\n    firstXDays:20,\r\n\r\n    regression:true,\r\n    useRegressionTypeIndex:1,\r\n    simulationAddDays:5,\r\n    useModelFromOtherCountry:null,\r\n    fromDayWithGreaterThan:1,\r\n\r\n    usePredictionFromDates:false,\r\n    predictionFromDates:null,\r\n\r\n\r\n\r\n    //real simulation\r\n    simulateSIR:false,\r\n    population:9800000,\r\n    transmitionRate:0.01,\r\n    recoverTime:0.1,\r\n    maxTimeSimulate:30\r\n\r\n\r\n\r\n\r\n\r\n};\r\n\r\nexport const simulationReducer = handleActions({\r\n\r\n\r\n\r\n\r\n    [Actions.changeSimulation]: (state, action) => {\r\n\r\n        const {name,value} = action.payload;\r\n\r\n\r\n        let obj = {};\r\n        obj[name]=value;\r\n\r\n        //get data for primary\r\n\r\n\r\n\r\n        return {\r\n            ...state,\r\n            ...obj\r\n\r\n\r\n        }\r\n\r\n    },\r\n\r\n    [Actions.addCountrySelected]: (state, action) => {\r\n\r\n        let newCountrySelected = [...state.countrySelectedList,{value:'',label:''}];\r\n\r\n        return {\r\n            ...state,\r\n            countrySelectedList:newCountrySelected\r\n        }\r\n\r\n\r\n    },\r\n    [Actions.removeCountrySelected]: (state, action) => {\r\n        const {index} = action.payload;\r\n\r\n        let newCountrySelected = [...state.countrySelectedList];\r\n        newCountrySelected.splice(index,1);\r\n\r\n        return {\r\n            ...state,\r\n            countrySelectedList:newCountrySelected\r\n        }\r\n\r\n\r\n    },\r\n    [Actions.changeCountrySelected]: (state, action) => {\r\n        const {index,value} = action.payload;\r\n\r\n        let newCountrySelected = [...state.countrySelectedList];\r\n\r\n        newCountrySelected[index] = {value:value,label:value};\r\n        return {\r\n            ...state,\r\n            countrySelectedList:newCountrySelected\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n},simulationState);\r\n\r\n\r\n","/**\r\n * Created by Monster on 2020-03-16.\r\n */\r\n\r\n\r\n\r\nimport { createAction,handleActions } from 'redux-actions';\r\nimport {combineReducers} from 'redux';\r\nimport * as Actions from \"../actions/virusActions\"\r\n\r\n\r\n\r\n\r\nconst recordsState = {\r\n\r\n    initConfirmedRecords:false,\r\n    initDeathsRecords:false,\r\n\r\n    rawConfirmedData:null,\r\n    rawDeathData:null,\r\n\r\n    availableConfirmedCountries:{},\r\n    availableConfirmedDates:[],\r\n\r\n    availableDeathCountries:{},\r\n    availableDeathDates:[],\r\n\r\n\r\n\r\n\r\n\r\n\r\n};\r\n\r\nexport const recordsStateReducer = handleActions({\r\n\r\n\r\n    [Actions.confirmedRawData]: (state, action) => {\r\n\r\n        console.debug(\"CVonfirmed raw data\")\r\n        const {data,header} = action.payload;\r\n\r\n        let availableDates = [];\r\n        let availableCountries = {};\r\n        //countries that have engought data to generate a regretions\r\n        let availableCountriesForCompareRegretion = [];\r\n\r\n        header.forEach((col,index)=>{\r\n\r\n            if(index>0){\r\n\r\n                availableDates.push({date:col,index:index});\r\n            }\r\n\r\n\r\n\r\n        });\r\n\r\n        data.forEach((row,index)=>{\r\n         //   console.debug(\"ROW = \",row);\r\n\r\n                const countryName= row[0];\r\n                availableCountries[countryName]= {label:countryName,value:countryName,index:index};\r\n\r\n               // availableCountries.push({name:row[1],index});\r\n                //count the leading number of zeros\r\n                let numberNotZeros = 0;\r\n\r\n                for(let d = 1;d < row.length;d++){\r\n                    const value =  Number.parseInt(row[d]);\r\n                    if(value>0){\r\n                        numberNotZeros++\r\n                    }\r\n\r\n                }\r\n                if(numberNotZeros>30){\r\n                        //its ok add\r\n                    availableCountriesForCompareRegretion.push(index);\r\n                }\r\n\r\n\r\n\r\n        });\r\n\r\n     //   console.debug(\"Countries = \",availableCountries)\r\n\r\n       // console.debug(\"Valid comp = \",availableCountriesForCompareRegretion.length)\r\n\r\n\r\n        return {\r\n            ...state,\r\n            initConfirmedRecords:true,\r\n            rawConfirmedData:data,\r\n            availableConfirmedDates:availableDates,\r\n            availableConfirmedCountries:availableCountries,\r\n            availableCountriesForCompareRegretion,\r\n\r\n\r\n        }\r\n\r\n    },\r\n\r\n    [Actions.deathsRawData]: (state, action) => {\r\n\r\n        const {data,header} = action.payload;\r\n\r\n        let availableDates = [];\r\n        let availableCountries = {};\r\n        //countries that have engought data to generate a regretions\r\n        let availableCountriesForCompareRegretion = [];\r\n\r\n        header.forEach((col,index)=>{\r\n\r\n            if(index>0){\r\n\r\n                availableDates.push({date:col,index:index});\r\n            }\r\n\r\n\r\n\r\n        });\r\n\r\n        data.forEach((row,index)=>{\r\n            //   console.debug(\"ROW = \",row);\r\n\r\n            const countryName= row[0];\r\n            availableCountries[countryName]= {label:countryName,value:countryName,index:index};\r\n\r\n            // availableCountries.push({name:row[1],index});\r\n            //count the leading number of zeros\r\n            let numberNotZeros = 0;\r\n\r\n            for(let d = 1;d < row.length;d++){\r\n                const value =  Number.parseInt(row[d]);\r\n                if(value>0){\r\n                    numberNotZeros++\r\n                }\r\n\r\n            }\r\n            if(numberNotZeros>30){\r\n                //its ok add\r\n                availableCountriesForCompareRegretion.push(index);\r\n            }\r\n\r\n\r\n\r\n        });\r\n\r\n        //   console.debug(\"Countries = \",availableCountries)\r\n\r\n        // console.debug(\"Valid comp = \",availableCountriesForCompareRegretion.length)\r\n\r\n\r\n        return {\r\n            ...state,\r\n            initDeathRecords:true,\r\n            rawDeathData:data,\r\n            availableDeathDates:availableDates,\r\n            availableDeathCountries:availableCountries,\r\n           // availableCountriesForCompareRegretion,\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n},recordsState);\r\n\r\n","import { combineReducers } from 'redux';\r\n\r\nimport storage from 'localforage';\r\n\r\n\r\nimport {simulationReducer} from \"./simulationReducer\";\r\n\r\nimport {recordsStateReducer} from \"./recordsReducer\"\r\n\r\nimport { persistReducer } from 'redux-persist';\r\n\r\nconst persistSimulationConfig={\r\n    key: 'simulation',\r\n    storage: storage,\r\n   // blacklist: ['showProductGallery','showProductImage','currentImage']\r\n};\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n\r\n\r\n    records:recordsStateReducer,\r\n    simulation:persistReducer(persistSimulationConfig,simulationReducer),\r\n\r\n   // notifications:notifications\r\n\r\n});\r\n","\r\nimport * as Actions from \"../actions/virusActions\"\r\n\r\nimport {  put ,takeEvery} from \"redux-saga/effects\"\r\nimport moment from \"moment\";\r\n\r\n\r\n/**\r\n * Get raw csv data and treat it to a more friendly format\r\n * @param action\r\n */\r\nfunction* processRawData(action) {\r\n\r\n\r\n    const payload = action.payload;\r\n\r\n    console.debug(\"Payload = \",payload)\r\n    try{\r\n\r\n            //we need to compile report for countries since some are by region\r\n            const rawData = payload.records.data;\r\n            console.debug(\"Raw data = \",rawData)\r\n\r\n            let header = [...rawData[0]];\r\n\r\n            header.shift();\r\n            header.splice(1,1);\r\n             header.splice(1,1);\r\n             //change to nice date format\r\n        for(let r = 1;r<header.length;r++){\r\n            try{\r\n                const poorDate = header[r];\r\n                const realDate = moment(poorDate,'MM/DD/YY');\r\n                const parseDate = realDate.format('YYYY-MM-DD');\r\n                if(parseDate === 'Invalid date'){\r\n                    console.error(\"Invalid datge for \"+poorDate)\r\n                }\r\n                header[r] = parseDate\r\n            }catch (ex){\r\n                console.error(\"Invalid date = \",ex)\r\n            }\r\n\r\n        }\r\n\r\n            let newRawData = [];\r\n            let indexByCountryName = {};\r\n\r\n            for(let r = 1;r<rawData.length;r++){\r\n                const row = rawData[r];\r\n                //check if there is already a country defined\r\n                const countryName = row[1];\r\n\r\n                if(typeof indexByCountryName[countryName] !== 'undefined'){\r\n                    //exists update\r\n                    const index = indexByCountryName[countryName].index;\r\n                    const compileCountryRow = newRawData[index];\r\n                    for(let d = 4;d<compileCountryRow.length;d++){\r\n                        //add\r\n                        compileCountryRow[d]=compileCountryRow[d]+row[d];\r\n                    }\r\n                    newRawData[index] = compileCountryRow\r\n\r\n\r\n                }else{\r\n                    //create\r\n                    const currentIndex = newRawData.length;\r\n                    newRawData.push([...row]) ;\r\n                    indexByCountryName[countryName]={index:currentIndex};\r\n                }\r\n            }\r\n\r\n            //remove all the first column that is the territory\r\n        for(let r=0;r<newRawData.length;r++){\r\n                newRawData[r].shift();\r\n                //remove the 2 and 3 geo coordinates\r\n                 newRawData[r].splice(1,1);\r\n                 newRawData[r].splice(1,1);\r\n\r\n        }\r\n        yield put(Actions.processRawData.success());\r\n\r\n        console.debug(\"Final\")\r\n        if(payload.confirmed){\r\n            yield put(Actions.confirmedRawData({data:newRawData,header}));\r\n        }else if(payload.deaths){\r\n            yield put(Actions.deathsRawData({data:newRawData,header}));\r\n        }\r\n\r\n\r\n\r\n    }catch (e){\r\n        yield put(Actions.processRawData.failure({error:e.message}))\r\n    }finally {\r\n        yield put(Actions.processRawData.fulfill());\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function* watchProcessRawData() {\r\n    yield takeEvery(Actions.processRawData.TRIGGER,processRawData);\r\n}\r\n\r\n\r\n","\r\n\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { routinePromiseWatcherSaga } from 'redux-saga-routines';\r\n\r\nimport {createStore,applyMiddleware,compose} from 'redux';\r\n\r\nimport {rootReducer} from '../reducers/reducer';\r\n\r\nimport * as VirusSagas from \"../sagas/virusSagas\"\r\n\r\nimport { persistReducer,persistStore } from 'redux-persist';\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport let store = createStore(rootReducer,composeEnhancers(\r\n    applyMiddleware(sagaMiddleware,\r\n       /* loggerMiddleware*/),\r\n\r\n));\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nconst sagas = [\r\n\r\n                VirusSagas.watchProcessRawData,\r\n\r\n                routinePromiseWatcherSaga];\r\n\r\nsagas.forEach(sagaMiddleware.run);\r\n\r\n\r\n\r\n\r\n","\nimport \"./stylesheets/styles.scss\";\n\nimport * as serviceWorker from './serviceWorker';\nimport React from 'react';\nimport ReactDom from 'react-dom';\n\nimport VirusApp from \"./js/webapps/virusapp/components/VirusAppComponent\";\nimport { PersistGate } from 'redux-persist/lib/integration/react';\n\nimport { Provider } from 'react-redux'\nimport {store,persistor} from './js/webapps/virusapp/stores/virusStore';\n\nReactDom.render(\n    <Provider store={store}>\n\n        <PersistGate loading={<div>Carregando Loja</div>} persistor={persistor}>\n        <div className=\"contentMainBlock\">\n\n            <VirusApp/>\n\n        </div>\n\n        </PersistGate>\n\n\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}